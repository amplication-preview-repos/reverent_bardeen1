/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SourceService } from "../source.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SourceCreateInput } from "./SourceCreateInput";
import { Source } from "./Source";
import { SourceFindManyArgs } from "./SourceFindManyArgs";
import { SourceWhereUniqueInput } from "./SourceWhereUniqueInput";
import { SourceUpdateInput } from "./SourceUpdateInput";
import { ArticleFindManyArgs } from "../../article/base/ArticleFindManyArgs";
import { Article } from "../../article/base/Article";
import { ArticleWhereUniqueInput } from "../../article/base/ArticleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SourceControllerBase {
  constructor(
    protected readonly service: SourceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Source })
  @nestAccessControl.UseRoles({
    resource: "Source",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSource(@common.Body() data: SourceCreateInput): Promise<Source> {
    return await this.service.createSource({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        websiteUrl: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Source] })
  @ApiNestedQuery(SourceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Source",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sources(@common.Req() request: Request): Promise<Source[]> {
    const args = plainToClass(SourceFindManyArgs, request.query);
    return this.service.sources({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        websiteUrl: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Source })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Source",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async source(
    @common.Param() params: SourceWhereUniqueInput
  ): Promise<Source | null> {
    const result = await this.service.source({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        websiteUrl: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Source })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Source",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSource(
    @common.Param() params: SourceWhereUniqueInput,
    @common.Body() data: SourceUpdateInput
  ): Promise<Source | null> {
    try {
      return await this.service.updateSource({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          websiteUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Source })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Source",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSource(
    @common.Param() params: SourceWhereUniqueInput
  ): Promise<Source | null> {
    try {
      return await this.service.deleteSource({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          websiteUrl: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/articles")
  @ApiNestedQuery(ArticleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Article",
    action: "read",
    possession: "any",
  })
  async findArticles(
    @common.Req() request: Request,
    @common.Param() params: SourceWhereUniqueInput
  ): Promise<Article[]> {
    const query = plainToClass(ArticleFindManyArgs, request.query);
    const results = await this.service.findArticles(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,
        publishedAt: true,

        source: {
          select: {
            id: true,
          },
        },

        summary: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/articles")
  @nestAccessControl.UseRoles({
    resource: "Source",
    action: "update",
    possession: "any",
  })
  async connectArticles(
    @common.Param() params: SourceWhereUniqueInput,
    @common.Body() body: ArticleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articles: {
        connect: body,
      },
    };
    await this.service.updateSource({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/articles")
  @nestAccessControl.UseRoles({
    resource: "Source",
    action: "update",
    possession: "any",
  })
  async updateArticles(
    @common.Param() params: SourceWhereUniqueInput,
    @common.Body() body: ArticleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articles: {
        set: body,
      },
    };
    await this.service.updateSource({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/articles")
  @nestAccessControl.UseRoles({
    resource: "Source",
    action: "update",
    possession: "any",
  })
  async disconnectArticles(
    @common.Param() params: SourceWhereUniqueInput,
    @common.Body() body: ArticleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articles: {
        disconnect: body,
      },
    };
    await this.service.updateSource({
      where: params,
      data,
      select: { id: true },
    });
  }
}
